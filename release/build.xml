<?xml version="1.0" encoding="UTF-8"?>


<!--
To do a jnlp/jar release you do:

ant release
or:
ant stable_release
or:
ant alpha_release
or:
ant nightly_release


By default the base directory of the build is relative to where
this build.xml file is (even if you are running ant from some other
directory), thus the ".." implies the base directory is the parent
directory of this libs directory.  This can be overridden at the command
line using: and -Dbasedir=/some/other/dir
-->

<project basedir=".." default="all" name="IDV">

    <target name="init">
    <tstamp>
      <format property="start.time" pattern="yyyy-MM-dd HH:mm z" timezone="UTC"/>
    </tstamp>

    <!-- srcdir is where we check out code -->
        <property name="srcdir"  value="${basedir}" />
        <property name="rootdir"  value="${basedir}/.." />
        <property name="installerdir"  value="${basedir}/installers" />
        <mkdir dir="${installerdir}" />
        <property name="install4jdir"  value="/share/install4j" />
        <property name="makedir"  value="mkdir -p -m 775 " />

        <property name="idvgitrepo" value="https://github.com/Unidata/IDV.git"/>
        <property name="idvgitbranch" value="master"/>
        <property name="localgitrepo" value="${rootdir}/localgitrepo/idv"/>

       <!-- Read in the version from the properties file if it exists -->
       <property name="versionfile" value="${srcdir}/src/ucar/unidata/idv/resources/version.properties"/>
       <property file="${versionfile}"/>
       <available file="${versionfile}" property="idv.version" value="${idv.version.major}.${idv.version.minor}${idv.version.revision}"/>
       <available file="${versionfile}" property="idv.version.under" value="${idv.version.major}_${idv.version.minor}${idv.version.revision}"/>
       <available file="${versionfile}" property="idv.version.space" value="${idv.version.major}.${idv.version.minor} ${idv.version.revision}"/>


        <!-- libsdir is the cvs lib module -->
        <property name="libsdir"   value="${srcdir}/lib" />

        <!-- Where to put the jar files -->
        <property name="jardir" value="${libsdir}"/>

        <property name="ftpdir" value="ftp" />

        <property name="ploogindir" value="auxdata/plugins" />

        <property name="tmpbuilddir" value="${srcdir}/tmpbuilddir"/>

        <mkdir dir="${srcdir}" />
<!--
        <mkdir dir="${libsdir}"/>
-->
        <mkdir dir="${tmpbuilddir}"/>

        <property name="release_src_dir"   value="${srcdir}/src/ucar/unidata/idv/release" />

        <property name="webstart_root" value="webstart"/>
        <property name="webstart_jar_dir" value="webstart/IDV"/>
        <mkdir dir="webstart"/>
        <mkdir dir="webstart/IDV"/>

        <property name="webstart_url_root" value="http://www.unidata.ucar.edu"/>
        <property name="idv_release_path" value="/software/idv/release"/>
        <property name="idv_download_path" value="/downloads/idv"/>




<!-- Where we get the non jar files that we want to include in the webstart release -->
        <property name="webstart_src_dir" value="${release_src_dir}/webstart" />

<!-- Where we get the non jar files that we want to include in the zip release -->
        <property name="zip_src_dir" value="${release_src_dir}/zip" />

<!-- Where we get the installer config files for the release -->
        <property name="installer_src_dir" value="${release_src_dir}/installer" />

        <property name="sign_keystore" value="/share/idv/.keystore"/>
        <property name="keypassfile" value="/share/idv/.keypass"/>
        <property file="${keypassfile}"/>
        <available file="${keypassfile}" property="sign_password" value="${key.password}"/>

        <taskdef name="install4j"
               classname="com.install4j.Install4JTask"
               classpath="${install4jdir}/bin/ant.jar"/>
    </target>

    <target name="all" depends="init">
        <echo
            message="Building at ${start.time}. Build dir: ${basedir}" />
        <echo message="Checking out source tree." />
    <antcall target="gitclone" />
<!--  No need to do this automatically
        <echo message="FTPing visad." />
        <antcall target="visad" />
-->
        <echo message="Building ucar packages." />
        <ant antfile="${srcdir}/build.xml" target="all" />
    </target>

    <target name="quick" depends="init">
        <echo
            message="Building at ${start.time}. Build dir: ${basedir}" />
        <echo message="Checking out source tree." />
    <antcall target="gitclone" />
        <echo message="FTPing visad." />
        <antcall target="visad" />
        <echo message="Building ucar packages." />
        <ant antfile="${srcdir}/build.xml" target="justjars" />
        <!-- <antcall target="webstart_jars" /> -->
    </target>


    <target name="ftp" depends="init">
        <antcall target="zipdir" />
        <antcall target="scpftp" />
    </target>


    <target name="ftpdir" depends="init">
        <mkdir dir="${ftpdir}"/>
        <delete>
            <fileset dir="${ftpdir}" includes="**/*"/>
        </delete>
        <antcall target="zipjars" />
        <antcall target="srcjar" />
        <!--
        <jar
            jarfile="${ftpdir}/idv_src_${idv.version}.jar"
            compress="true"
            basedir="${srcdir}/.."
        >
            <include name="idv/ucar/**"/>
            <exclude name="idv/ucar/**/*.class"/>
            <exclude name="idv/ucar/**/*.map"/>
            <exclude name="idv/ucar/**/*.jar"/>
            <exclude name="idv/ucar/**/*.ascii"/>
            <exclude name="idv/ucar/**/*.tml"/>
            <exclude name="idv/ucar/**/*.bak"/>
            <exclude name="idv/ucar/**/*.zip"/>
            <exclude name="idv/ucar/**/*.shp"/>
            <exclude name="idv/ucar/**/*.nc"/>
            <exclude name="idv/ucar/unidata/data/storm/*ADOT*"/>
            <exclude name="idv/ucar/unidata/idv/control/storm/*ADOT*"/>
            <exclude name="idv/ucar/unidata/idv/control/storm/StormIntensityControl.java"/>
            <exclude name="idv/ucar/unidata/apps/demo/**"/>
            <exclude name="idv/ucar/unidata/apps/imageviewer/**"/>
            <exclude name="idv/ucar/unidata/apps/geon/**"/>
            <exclude name="idv/ucar/unidata/apps/lead/**"/>
            <exclude name="idv/ucar/unidata/apps/rico/**"/>
            <exclude name="idv/ucar/unidata/apps/sti/**"/>
            <exclude name="idv/ucar/unidata/apps/trex/**"/>
            <exclude name="idv/ucar/unidata/apps/workshop/**"/>
            <exclude name="idv/ucar/unidata/repository/**"/>
            <exclude name="idv/ucar/unidata/gridviewer/**/*.*"/>
            <exclude name="idv/ucar/unidata/grid/**"/>
            <exclude name="idv/ucar/unidata/geoloc/**"/>
            <exclude name="idv/ucar/unidata/idv/release/**"/>
            <exclude name="idv/ucar/unidata/view/sounding/test/**"/>
        </jar>
        -->
        <antcall target="zipdocs" />
    </target>

    <target name="srcjar" depends="init">
        <jar
            jarfile="${ftpdir}/idv_src_${idv.version}.jar"
            compress="true"
            basedir="${basedir}"
        >
            <include name="src/ucar/**"/>
            <include name="build.xml"/>
            <exclude name="src/ucar/**/*.class"/>
            <exclude name="src/ucar/**/*.map"/>
            <exclude name="src/ucar/**/*.jar"/>
            <exclude name="src/ucar/**/*.ascii"/>
            <exclude name="src/ucar/**/*.tml"/>
            <exclude name="src/ucar/**/*.bak"/>
            <exclude name="src/ucar/**/*.zip"/>
            <exclude name="src/ucar/**/*.shp"/>
            <exclude name="src/ucar/**/*.nc"/>
            <exclude name="src/ucar/unidata/data/storm/*ADOT*"/>
            <exclude name="src/ucar/unidata/idv/control/storm/*ADOT*"/>
            <exclude name="src/ucar/unidata/idv/control/storm/StormIntensityControl.java"/>
            <exclude name="src/ucar/unidata/apps/demo/**"/>
            <exclude name="src/ucar/unidata/apps/imageviewer/**"/>
            <exclude name="src/ucar/unidata/apps/geon/**"/>
            <exclude name="src/ucar/unidata/apps/lead/**"/>
            <exclude name="src/ucar/unidata/apps/rico/**"/>
            <exclude name="src/ucar/unidata/apps/sti/**"/>
            <exclude name="src/ucar/unidata/apps/trex/**"/>
            <exclude name="src/ucar/unidata/apps/workshop/**"/>
            <exclude name="src/ucar/unidata/repository/**"/>
            <exclude name="src/ucar/unidata/gridviewer/**/*.*"/>
            <exclude name="src/ucar/unidata/grid/**"/>
            <exclude name="src/ucar/unidata/geoloc/**"/>
            <exclude name="src/ucar/unidata/idv/release/**"/>
            <exclude name="src/ucar/unidata/view/sounding/test/**"/>
            <exclude name="auxdata/**"/>
            <exclude name="examples/**"/>
            <exclude name="lib/**"/>
            <exclude name="libsrc/**"/>
            <exclude name="release/**"/>
            <exclude name="test/**"/>
        </jar>
    </target>

    <target name="install_plugins" depends="init">
        <sshexec host="conan"
            username="${user.name}"
            keyfile="${user.home}/.ssh/id_dsa"
            passphrase=""
            command="${makedir} /content/software/idv/plugins"
        />
        <scp
            todir="${user.name}@conan:/content/software/idv/plugins"
            keyfile="${user.home}/.ssh/id_dsa"
            passphrase=""
        >
            <fileset  dir="${ploogindir}" includes="*.jar,*.xml"/>
            <fileset  dir="${libsdir}" includes="workshop.jar,simple.jar"/>
        </scp>
    </target>




    <target name="scpftp" depends="init">
        <scp
            todir="${user.name}@ftp:/home/ftp/pub/idv/untested"
            keyfile="${user.home}/.ssh/id_dsa"
            passphrase=""
        >
            <fileset  dir="${ftpdir}" includes="*.jar,*.zip"/>
        </scp>
    </target>

    <target name="cvsco" depends="init">
        <cvs package="metapps" dest="${srcdir}" quiet="true" error="dummyfile" output="dummyfile"/>
    </target>

  <target name="-check-localgitrepo">
    <available file="${localgitrepo}/.git" type="dir" property="localgitrepo.present"/>
  </target>

  <target name="-if-localgitrepo" depends="-check-localgitrepo" if="localgitrepo.present">
    <!-- Pulling the git repo, but from outside the git repo. This requires some special command line arguments as explained below. -->
    <exec executable="git">
      <arg line="--git-dir=${localgitrepo}/.git --work-tree=${localgitrepo} pull" />
    </exec>
  </target>

  <target name="-unless-localgitrepo" depends="-check-localgitrepo" unless="localgitrepo.present">
    <mkdir dir="${localgitrepo}"/>
    <echo message="This clone may take a while, but subsequently repo will be on local file system, and this lengthy clone step will not be necessary." />
    <echo message="git clone ${idvgitrepo} -b ${idvgitbranch} ${localgitrepo}"/>
    <exec executable="git">
      <arg line="clone ${idvgitrepo} -b ${idvgitbranch} ${localgitrepo}" />
    </exec>
  </target>

  <target name="gitlocalrepo">
    <antcall target="-if-localgitrepo"/>
    <antcall target="-unless-localgitrepo"/>
  </target>

  <target name="gitclone" depends="gitlocalrepo">
    <!-- Actually not a git clone, strictly speaking. Simply copying the local git repo -->
    <echo message="git cloning ${localgitrepo}"/>
    <copy todir="${srcdir}">
      <fileset dir="${localgitrepo}"/>
    </copy>
    </target>

    <target name="visad" depends="init">
        <ftp action="get"
             server="ftp.ssec.wisc.edu"
             password="idv@unidata.ucar.edu"
             userid="anonymous"
             remotedir="/pub/visad-2.0"
             depends="yes"
             passive="yes"
             skipFailedTransfers="true"
         >
            <fileset  dir="${libsdir}" includes="visad.jar"/>
        </ftp>

        <!--
        <exec executable="cvs" dir="${libsdir}">
            <arg line="commit -m idv_build_snapshot visad.jar"/>
        </exec>
        -->

    <!-- Not sure what this is, or even if it is being used. -JCC 2/29/2012
        <exec executable="svn" dir="${libsdir}">
            <arg line="commit -m idv_build_snapshot visad.jar"/>
        </exec>
        <svn>
        <commit file="${libsdir}/visad.jar" message="idv_build_snapshot"/>
        </svn>
-->

    </target>


    <target name="release" depends="init">
        <property name="release_dir"          value="${idv.version.under}"/>
        <property name="release_path"         value="/software/idv/${release_dir}"/>
        <property name="release_name"         value="${release_dir}"/>


       <antcall target="snapshot_release">
           <param name="snapshot_dir" value="${release_dir}"/>
           <param name="snapshot_path" value="${release_path}"/>
           <param name="snapshot_name" value="${release_name}"/>
           <param name="snapshot_download_path" value="${idv_download_path}/${release_dir}"/>
           <param name="snapshot_webstart_path" value="/software/idv/current"/>
           <param name="snapshot_title" value="IDV ${idv.version.space} release&lt;p&gt;Built: ${start.time}"/>
       </antcall>
    </target>


    <target name="stable_release" depends="init">
        <property name="stable_dir"          value="idv_${idv.version}"/>
        <property name="stable_path"         value="${idv_release_path}/${stable_dir}"/>
        <property name="stable_name"         value="stable"/>


       <antcall target="snapshot_release">
           <param name="snapshot_dir" value="${stable_dir}"/>
           <param name="snapshot_path" value="${stable_path}"/>
           <param name="snapshot_name" value="${stable_name}"/>
           <param name="snapshot_download_path" value="${idv_download_path}/${stable_name}"/>
           <param name="snapshot_webstart_path" value="${idv_release_path}/${stable_name}"/>
           <param name="snapshot_title" value="Latest IDV ${idv.version.space} stable release&lt;p&gt;Built: ${start.time}"/>
       </antcall>
    </target>



    <target name="alpha_release" depends="init">
        <property name="alpha_dir"          value="alpha_idv_${idv.version}"/>
        <property name="alpha_path"         value="${idv_release_path}/${alpha_dir}"/>
        <property name="alpha_name"         value="alpha"/>


       <antcall target="snapshot_release">
           <param name="snapshot_dir" value="${alpha_dir}"/>
           <param name="snapshot_path" value="${alpha_path}"/>
           <param name="snapshot_name" value="${alpha_name}"/>
           <param name="snapshot_download_path" value="${idv_download_path}/${alpha_name}"/>
           <param name="snapshot_webstart_path" value="${idv_release_path}/${alpha_name}"/>
           <param name="snapshot_title" value="Latest IDV ${idv.version.space} alpha release&lt;p&gt;Built: ${start.time}"/>
       </antcall>
    </target>



    <target name="nightly_release" depends="init">
        <property name="nightly_dir"          value="nightly_idv_${idv.version}"/>
        <property name="nightly_path"         value="${idv_release_path}/${nightly_dir}"/>
        <property name="nightly_name"         value="nightly"/>


       <antcall target="snapshot_release">
           <param name="snapshot_dir" value="${nightly_dir}"/>
           <param name="snapshot_path" value="${nightly_path}"/>
           <param name="snapshot_name" value="${nightly_name}"/>
           <param name="snapshot_download_path" value="${idv_download_path}/${nightly_name}"/>
           <param name="snapshot_webstart_path" value="${idv_release_path}/${nightly_name}"/>
           <param name="snapshot_title" value="Latest IDV ${idv.version.space} nightly release&lt;p&gt;Built: ${start.time}"/>
       </antcall>
    </target>



    <target name="test_release" depends="init">
        <property name="test_dir"          value="test_idv_${idv.version}"/>
        <property name="test_path"         value="${idv_release_path}/${test_dir}"/>
        <property name="test_name"         value="test"/>


       <antcall target="snapshot_release">
           <param name="snapshot_dir" value="${test_dir}"/>
           <param name="snapshot_path" value="${test_path}"/>
           <param name="snapshot_name" value="${test_name}"/>
           <param name="snapshot_webstart_path" value="${idv_release_path}/${test_name}"/>
           <param name="snapshot_download_path" value="${idv_download_path}/${test_name}"/>
           <param name="snapshot_title" value="Latest IDV ${idv.version.space} test release&lt;p&gt;Built: ${start.time}"/>
       </antcall>
    </target>




    <target name="snapshot_release" depends="init">

        <property name="ftp_path" value="${snapshot_download_path}/ftp"/>
        <echo message="Making conan directory: ${snapshot_path}"/>
        <exec executable="ssh">
            <arg line="conan ${makedir} /content${snapshot_path};"/>
        </exec>
        <exec executable="ssh">
            <arg line="conan ${makedir} /content${snapshot_path}/docs;"/>
        </exec>
        <exec executable="ssh">
            <arg line="conan ${makedir} /content${snapshot_path}/docs/userguide;"/>
        </exec>
        <exec executable="ssh">
            <arg line="conan ${makedir} /content${snapshot_path}/docs/workshop;"/>
        </exec>

        <echo message="Making download directory: /content${snapshot_download_path}"/>
        <exec executable="ssh">
            <arg line="conan cd /home/ftp/pub/idv; ${makedir} ${snapshot_dir};"/>
        </exec>
        <exec executable="ssh">
            <arg line="conan ${makedir} /content${snapshot_download_path};"/>
        </exec>
        <exec executable="ssh">
            <arg line="conan cd /content${snapshot_download_path};if !(-e idv) ln -s /web/ftp/pub/idv idv;if (-e ftp) rm ftp;ln -s idv/${snapshot_dir} ftp"/>
        </exec>


        <echo message="Copying installers to downloads directory"/>

        <scp
            todir="${user.name}@conan:/content/${ftp_path}"
            keyfile="${user.home}/.ssh/id_dsa"
            passphrase="">
            <fileset  dir="installers" includes="**/idv_${idv.version.under}_**"/>
        </scp>

        <echo message="Making webstart directory: ${snapshot_path}/webstart"/>
        <exec executable="ssh">
            <arg line="conan ${makedir} /content${snapshot_path}/webstart;"/>
        </exec>
        <exec executable="ssh">
            <arg line="conan ${makedir} /content${snapshot_path}/webstart/IDV;"/>
        </exec>

<!--  Not needed after 2.6a2
        <exec executable="ssh">
            <arg line="conan cd /content${snapshot_path}/webstart;if !(-e java3D) ln -s /content/software/idv/webstart/java3D java3D"/>
        </exec>
-->

       <antcall target="webstart_release">
          <param  name="webstart_target" value="${snapshot_path}/webstart"/>
          <param  name="codebase_path" value="${snapshot_webstart_path}/webstart"/>
       </antcall>

        <echo message="Making docs, jars zip, etc."/>
        <antcall target="ftpdir"/>
        <scp
            todir="${user.name}@conan:/content${ftp_path}"
            keyfile="${user.home}/.ssh/id_dsa"
            passphrase=""
        >
            <fileset  dir="${ftpdir}" includes="*.jar,*.zip"/>
        </scp>



        <exec dir="docs" executable="scp">
             <arg line = "-r userguide conan:/content${snapshot_path}/docs"/>
        </exec>

        <exec dir="docs" executable="scp">
             <arg line = "-r workshop conan:/content${snapshot_path}/docs"/>
        </exec>

        <exec executable="ssh">
            <arg line="conan cd /content${snapshot_path}; if !(-e plugins) ln -s /content/software/idv/plugins plugins"/>
        </exec>

        <exec executable="ssh">
            <arg line="conan cd /content${snapshot_path}; if !(-e resources) ln -s /content/software/idv/resources resources"/>
        </exec>

        <echo message="Copying index.html file: /content${snapshot_path}"/>

        <copy overwrite="true" file="src/ucar/unidata/idv/release/installer/index.html" todir="webstart">
            <filterset>
                <filter token="IDV_VERSION" value="${idv.version}"/>
                <filter token="IDV_VERSION_DOT" value="${idv.version}"/>
                <filter token="IDV_VERSION_UNDER" value="${idv.version.under}"/>
                <filter token="IDV_VERSION_SPACE" value="${idv.version.space}"/>
                <filter token="IDV_TITLE" value="${snapshot_title}"/>
                <filter token="IDV_NAME" value="${snapshot_name}"/>
            </filterset>
        </copy>

        <scp
            todir="${user.name}@conan:/content${snapshot_path}"
            keyfile="${user.home}/.ssh/id_dsa"
            passphrase=""
            file="webstart/index.html"/>


        <echo message="Copying toc.xml file: ${snapshot_download_path}"/>
        <copy overwrite="true" file="src/ucar/unidata/idv/release/installer/toc.xml" todir="${ftpdir}">
            <filterset>
                <filter token="IDV_VERSION" value="${idv.version}"/>
                <filter token="IDV_VERSION_DOT" value="${idv.version}"/>
                <filter token="IDV_VERSION_UNDER" value="${idv.version.under}"/>
                <filter token="IDV_VERSION_SPACE" value="${idv.version.space}"/>
                <filter token="IDV_TITLE" value="${snapshot_title}"/>
                <filter token="IDV_NAME" value="${snapshot_name}"/>
                <filter token="DOC_PATH" value="${snapshot_path}"/>
            </filterset>
        </copy>


        <scp
            todir="${user.name}@conan:/content${snapshot_download_path}"
            keyfile="${user.home}/.ssh/id_dsa"
            passphrase=""
            file="${ftpdir}/toc.xml"/>

        <echo message="Flipping links: ln -s ${snapshot_dir} ${snapshot_name}"/>
        <exec executable="ssh">
            <arg line="conan cd /content${idv_release_path}; rm -f ${snapshot_name};  ln -s ${snapshot_dir} ${snapshot_name}"/>
        </exec>

        <exec executable="ssh">
            <arg line="conan cd /home/ftp/pub/idv; rm -f ${snapshot_name};  ln -s ${snapshot_dir} ${snapshot_name}"/>
        </exec>

        <echo message="Setting mode g+w"/>
        <exec executable="ssh">
            <arg line="conan cd /content${idv_release_path} ; chmod -R g+w ${snapshot_dir}"/>
        </exec>


    </target>






    <target name="webstart_release" depends="init">

<!-- Sign and copy the jars over -->
        <antcall target="webstart_jars"/>

<!-- Copy the jnlp and html files over -->
        <copy overwrite="true" todir="${webstart_jar_dir}">
            <fileset
                dir="${webstart_src_dir}"
                includes="*.jnlp,*.html" />
            <filterset>
                <filter token="IDV_CODEBASE" value="${webstart_url_root}${codebase_path}/"/>
                <filter token="IDV_VERSION_SPACE" value="${idv.version.space}"/>
            </filterset>
        </copy>

        <copy overwrite="true"  todir="${webstart_jar_dir}">
            <fileset
                dir="${webstart_src_dir}"
                includes="*.gif" />
        </copy>

        <echo message="scp'ing jar files to: /content${webstart_target}/IDV"/>
<!--
        <scp
            todir="${user.name}@conan:/content${webstart_target}/IDV"
            keyfile="${user.home}/.ssh/id_dsa"
            passphrase=""
        >
            <fileset  dir="${webstart_jar_dir}" includes="*.jar,*.jnlp,*.html"/>
        </scp>
-->
        <exec dir="${webstart_root}" executable="scp" failonerror="true">
             <arg line="-p -r IDV conan:/content${webstart_target}"/>
        </exec>



    </target>


    <target name="webstart_jars" depends="init">

        <antcall target="copyandsign">
            <param name="file" value="idv.jar"/>
            <param name="todir" value="${webstart_jar_dir}"/>
        </antcall>

        <antcall target="copyandsign">
            <param name="file" value="auxdata.jar"/>
            <param name="todir" value="${webstart_jar_dir}"/>
        </antcall>


        <antcall target="copyandsign">
            <param name="file" value="ncIdv.jar"/>
            <param name="todir" value="${webstart_jar_dir}"/>
        </antcall>

        <antcall target="copyandsign">
            <param name="file" value="external.jar"/>
            <param name="todir" value="${webstart_jar_dir}"/>
        </antcall>

        <antcall target="copyandsign">
            <param name="file" value="jython.jar"/>
            <param name="todir" value="${webstart_jar_dir}"/>
        </antcall>

        <antcall target="copyandsign">
            <param name="file" value="local-visad.jar"/>
            <param name="todir" value="${webstart_jar_dir}"/>
        </antcall>

        <antcall target="copyandsign">
            <param name="file" value="visad.jar"/>
            <param name="todir" value="${webstart_jar_dir}"/>
        </antcall>

        <antcall target="copyandsign">
            <param name="file" value="simpleidv.jar"/>
            <param name="todir" value="${webstart_jar_dir}"/>
        </antcall>
    </target>

    <target name="copy">
        <copy overwrite="true"  file="${jardir}/${file}" tofile="${todir}/${file}"/>
    </target>

    <target name="copyandsign">
        <uptodate property="${file}_uptodate" targetfile="${todir}/${file}">
            <srcfiles dir="${jardir}" includes="${file}"/>
        </uptodate>
        <antcall target="copyandsign2">
           <param name="from" value="${jardir}/${file}"/>
           <param name="to" value="${todir}/${file}"/>
        </antcall>
    </target>

    <target name="copyandsign2" unless="${file}_uptodate">
        <copy overwrite="true"  file="${from}" tofile="${to}"/>
        <signjar alias="idv" jar="${to}"
            keystore="${sign_keystore}" storepass="${sign_password}"/>
    </target>




    <target name="zipjars" depends="init">
        <zip
            zipfile="${ftpdir}/idv_jars_${idv.version}.zip"
            compress="true">
            <fileset
               dir="${zip_src_dir}"
               includes="README,localjars.jnlp,idv.gif" />
            <fileset
               dir="${libsdir}"
               includes="auxdata.jar \
                         external.jar \
                         local-visad.jar \
                         visad.jar \
                         idv.jar \
                         ncIdv.jar \
                         simpleidv.jar \
                         jython.jar" />
        </zip>
    </target>

    <target name="zipdocs" depends="init">
<!-- TODO: What do we want zipped here? -->
        <ant antfile="${srcdir}/build.xml" target="docs" />
        <zip
            zipfile="${ftpdir}/idv_userguide_${idv.version}.zip"
            compress="true">
            <fileset
               dir="${basedir}/docs/userguide/"
               includes="**"
               excludes="CVS/**" />
        </zip>
        <jar
            jarfile="${ftpdir}/idv_javadoc_${idv.version}.jar"
            basedir="${basedir}"
            includes = "docs/javadoc/**"
        />
    </target>

    <target name="installers" depends="init">
       <copy file="${installer_src_dir}/idv.install4j" tofile="${installerdir}/idv.install4j.${idv.version}" overwrite="true"/>
      <install4j
          projectfile="${installerdir}/idv.install4j.${idv.version}"
          release="${idv.version}"
          destination="${installerdir}"
      >
          <variable name="SRCDIR" value="${basedir}"/>
      </install4j>
      <checksum>
        <fileset dir="${installerdir}">
            <include name="idv_${idv.version.under}_*.sh"/>
            <include name="idv_${idv.version.under}_*.exe"/>
            <include name="idv_${idv.version.under}_*.dmg"/>
        </fileset>
      </checksum>

    </target>

</project>
